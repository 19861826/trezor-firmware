from __future__ import annotations

from objects import Object


def beginning(script: str) -> str:
    return f"""\
# File generated by {script}.py
set pagination off
set print array on
set print pretty on
# pwd is core/src
set logging file ../tools/gdb_scripts/{script}.log
set logging on
"""


def run() -> str:
    return "run"


def indent_list(lines: list[str], num: int = 2) -> str:
    return "\n".join(indent(line, num) for line in lines)


def indent(text: str, num: int = 2) -> str:
    return num * " " + text


def command_teardown(b_num: int, show_only_once: bool, continue_after_cmd: bool) -> str:
    delete_breakpoint = [
        "# deleting itself not to show multiple times",
        f"delete {b_num}",
    ]
    cont = [
        "# not stopping the debugger",
        "continue",
    ]

    buf = ""
    if show_only_once:
        buf += "\n"
        buf += indent_list(delete_breakpoint)
    if continue_after_cmd:
        buf += "\n"
        buf += indent_list(cont)

    return buf


def breakpoint_and_command(obj: Object, cmd_num: int, command_content: str) -> str:
    return "\n".join(
        [
            f"# {obj.comment}",
            f"break {obj.breakpoint}",
            f"commands {cmd_num}",
            command_content,
            "end\n",
        ]
    )
